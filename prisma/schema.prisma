generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model roles {
  id       Int           @id @default(autoincrement())
  desc     String?
  rol      String        @unique
  usuarios usuario_rol[]
}

model usuario_rol {
  id        Int       @id @default(autoincrement())
  rolid     Int?
  usuarioid Int?
  rol       roles?    @relation(fields: [rolid], references: [id])
  usuario   usuarios? @relation(fields: [usuarioid], references: [id])
}

model usuarios {
  id                  Int                   @id @default(autoincrement())
  nombre              String
  amaterno            String
  apaterno            String
  usuario             String                @unique
  correo              String                @unique
  contrasena          String
  ncontrol            String
  admin               Boolean
  puntos              Int?
  palabras_aprobadas  palabras_aprobadas[]
  palabras_pendientes palabras_pendientes[]
  roles               usuario_rol[]
}

model palabras_aprobadas {
  id           Int                @id @default(autoincrement())
  texto        String             @unique
  idtipo       Int
  usuarioid    Int?
  fonetica     String
  tipo         tipos              @relation(fields: [idtipo], references: [id])
  usuario      usuarios?          @relation(fields: [usuarioid], references: [id])
  contextos    palabra_contexto[]
  traducciones traducciones[]
}

model palabras_pendientes {
  id               Int                @id @default(autoincrement())
  texto            String
  usuarioid        Int?
  idtipo           Int?
  tipo             tipos?             @relation(fields: [idtipo], references: [id])
  usuario          usuarios?          @relation(fields: [usuarioid], references: [id])
  contextos? palabra_contexto[]
  traducciones     traducciones[]
}

model traducciones {
  id          Int                  @id @default(autoincrement())
  traduccion  String
  palabraid   Int?
  palabra_pid Int?
  pendiente   palabras_pendientes? @relation(fields: [palabra_pid], references: [id])
  aprobada    palabras_aprobadas?  @relation(fields: [palabraid], references: [id])
}

model categorias {
  id        Int    @id @default(autoincrement())
  categoria String
}

model contextos {
  id       Int                @id @default(autoincrement())
  contexto String
  palabras palabra_contexto[]
}

model palabra_contexto {
  id                  Int                  @id @default(autoincrement())
  id_palabra          Int?
  id_contexto         Int?
  id_posible_palabra  Int?
  contexto            contextos?           @relation(fields: [id_contexto], references: [id])
  palabra             palabras_aprobadas?  @relation(fields: [id_palabra], references: [id])
  palabra_pendientes palabras_pendientes? @relation(fields: [id_posible_palabra], references: [id])
}

model tipos {
  id                  Int                   @id @default(autoincrement())
  tipo                String
  palabras_aprobadas  palabras_aprobadas[]
  palabras_pendientes palabras_pendientes[]
}
